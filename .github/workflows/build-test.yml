name: OpenWrt DVB feed buildbot

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  prepare:
    name: Prepare source
    runs-on: ubuntu-latest

    steps:
      - name: Download source
        run: |
          SDK_TAR="$(curl -s https://downloads.openwrt.org/snapshots/targets/tegra/generic/sha256sums | awk -F'*' '/openwrt-sdk/ {printf $2}')"
          echo "SDK=${SDK_TAR%.tar.xz}" >> ${GITHUB_ENV}
          git clone --depth 1 ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git ${SDK_TAR%.tar.xz}/package
          curl -O https://downloads.openwrt.org/snapshots/targets/tegra/generic/${SDK_TAR}
          tar -x -J -f ${SDK_TAR}
          mkdir -p dl feeds
          cd ${SDK_TAR%.tar.xz}
          rm -R dl
          ln -s -f ../dl dl
          ln -s -f ../feeds feeds
          make defconfig
          make -j$(nproc) V=s download
          make -j$(nproc) V=s package/v4l-dvb/{prepare,clean}
          rm -R dl/*/
          scripts/feeds update -a

      - name: Cache source
        uses: actions/cache@v3
        with:
          key: downloads
          path: |
            dl
            feeds

  main:
    name: Build targets
    needs: prepare
    runs-on: ubuntu-latest
    env:
      TARGET: x86/64

    steps:
      - name: Prepare project
        run: |
          SDK_TAR="$(curl -s https://downloads.openwrt.org/snapshots/targets/${TARGET}/sha256sums | awk -F'*' '/openwrt-sdk/ {printf $2}')"
          echo "SDK=${SDK_TAR%.tar.xz}" >> ${GITHUB_ENV}
          git clone --depth 1 ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git ${SDK_TAR%.tar.xz}/package
          git clone --depth 1 --branch gh-pages ${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}.git repo || true
          curl -O https://downloads.openwrt.org/snapshots/targets/${TARGET}/${SDK_TAR}
          tar -x -J -f ${SDK_TAR}

      - name: Restore cached source
        uses: actions/cache@v3
        with:
          key: downloads
          path: |
            dl
            feeds

      - name: Build packages
        run: |
          ls -al
          mkdir -p dl feeds
          cd ${SDK}
          rm -R dl
          ln -s -f ../dl dl
          ln -s -f ../feeds feeds
          printf "CONFIG_BUILD_LOG=y\nCONFIG_SIGNED_PACKAGES=n\n" >> .config
          make defconfig
          make -j$(nproc) V=s
          echo "LOG_ARCHIVE_NAME=${TARGET/\//-}-${GITHUB_WORKFLOW_SHA}" >> ${GITHUB_ENV}

      - name: Store logs
        uses: actions/upload-artifact@v3
        with:
          name: ${{env.LOG_ARCHIVE_NAME}}-logs
          path: ${{env.SDK}}/logs/

      - name: Publish packages
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p repo/snapshots
          cp -R -f ${SDK}/bin/. repo/snapshots/.
          cd repo
          git update-ref -d HEAD
          git config --local user.name "github-actions[bot]"
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Publish ${GITHUB_WORKFLOW_SHA} packages"
          git push -f https://${GITHUB_REPOSITORY_OWNER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git gh-pages
