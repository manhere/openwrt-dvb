From 947332306d692bbf9ffaadc1d704168d2c3b5f49 Mon Sep 17 00:00:00 2001
From: glenvt18 <glenvt18@gmail.com>
Date: Wed, 23 Aug 2017 02:29:23 +0300
Subject: [PATCH] Improve portability across libc implementations

---
 i18n.h   |  2 +-
 osd.c    |  2 +-
 thread.c |  5 ++++-
 tools.c  |  6 +++++-
 tools.h  | 19 ++++++++++++++++++-
 vdr.c    |  9 ++++++---
 6 files changed, 35 insertions(+), 8 deletions(-)

--- a/i18n.h
+++ b/i18n.h
@@ -46,7 +46,7 @@ const cStringList *I18nLanguages(void);
    ///< have an actual locale installed. The rest are just dummy entries
    ///< to allow having three letter language codes for other languages
    ///< that have no actual locale on this system.
-const char *I18nTranslate(const char *s, const char *Plugin = NULL) __attribute_format_arg__(1);
+const char *I18nTranslate(const char *s, const char *Plugin = NULL)  __attribute__((__format_arg__ (1)));
    ///< Translates the given string (with optional Plugin context) into
    ///< the current language. If no translation is available, the original
    ///< string will be returned.
--- a/osd.c
+++ b/osd.c
@@ -12,7 +12,7 @@
 #include <stdlib.h>
 #include <sys/ioctl.h>
 #include <sys/stat.h>
-#include <sys/unistd.h>
+#include <unistd.h>
 #include "device.h"
 #include "tools.h"
 
--- a/thread.c
+++ b/thread.c
@@ -160,7 +160,9 @@ cRwLock::cRwLock(bool PreferWriter)
   writeLockThreadId = 0;
   pthread_rwlockattr_t attr;
   pthread_rwlockattr_init(&attr);
+#ifdef __GLIBC__
   pthread_rwlockattr_setkind_np(&attr, PreferWriter ? PTHREAD_RWLOCK_PREFER_WRITER_NP : PTHREAD_RWLOCK_PREFER_READER_NP);
+#endif
   pthread_rwlock_init(&rwlock, &attr);
 }
 
@@ -210,7 +212,8 @@ cMutex::cMutex(void)
   locked = 0;
   pthread_mutexattr_t attr;
   pthread_mutexattr_init(&attr);
-  pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ERRORCHECK_NP);
+  // use PTHREAD_MUTEX_ERRORCHECK for portability
+  pthread_mutexattr_settype(&attr, PTHREAD_MUTEX_ERRORCHECK);
   pthread_mutex_init(&mutex, &attr);
 }
 
--- a/tools.c
+++ b/tools.c
@@ -672,7 +672,7 @@ char *ReadLink(const char *FileName)
 {
   if (!FileName)
      return NULL;
-  char *TargetName = canonicalize_file_name(FileName);
+  char *TargetName = realpath(FileName, NULL);
   if (!TargetName) {
      if (errno == ENOENT) // file doesn't exist
         TargetName = strdup(FileName);
@@ -1562,11 +1562,15 @@ cReadDir::~cReadDir()
 struct dirent *cReadDir::Next(void)
 {
   if (directory) {
+#if defined(__GLIBC__) && defined(__GLIBC_PREREQ)
 #if !__GLIBC_PREREQ(2, 24) // readdir_r() is deprecated as of GLIBC 2.24
      while (readdir_r(directory, &u.d, &result) == 0 && result) {
 #else
      while ((result = readdir(directory)) != NULL) {
 #endif
+#else
+     while (readdir_r(directory, &u.d, &result) == 0 && result) {
+#endif
            if (strcmp(result->d_name, ".") && strcmp(result->d_name, ".."))
               return result;
            }
--- a/tools.h
+++ b/tools.h
@@ -28,6 +28,16 @@
 #include <sys/types.h>
 #include "thread.h"
 
+#ifndef ACCESSPERMS
+# define ACCESSPERMS (S_IRWXU|S_IRWXG|S_IRWXO) /* 0777 */
+#endif
+#ifndef ALLPERMS
+# define ALLPERMS (S_ISUID|S_ISGID|S_ISVTX|S_IRWXU|S_IRWXG|S_IRWXO)/* 07777 */
+#endif
+#ifndef DEFFILEMODE
+# define DEFFILEMODE (S_IRUSR|S_IWUSR|S_IRGRP|S_IWGRP|S_IROTH|S_IWOTH)/* 0666*/
+#endif
+
 typedef unsigned char uchar;
 
 extern int SysLogLevel;
@@ -444,12 +454,19 @@ class cReadDir {
 private:
   DIR *directory;
   struct dirent *result;
+#if defined(__GLIBC__) && defined(__GLIBC_PREREQ)
 #if !__GLIBC_PREREQ(2, 24) // readdir_r() is deprecated as of GLIBC 2.24
   union { // according to "The GNU C Library Reference Manual"
     struct dirent d;
     char b[offsetof(struct dirent, d_name) + NAME_MAX + 1];
     } u;
 #endif
+#else
+  union { // according to "The GNU C Library Reference Manual"
+    struct dirent d;
+    char b[offsetof(struct dirent, d_name) + NAME_MAX + 1];
+    } u;
+#endif
 public:
   cReadDir(const char *Directory);
   ~cReadDir();
@@ -818,7 +835,7 @@ public:
         data[i] = T(0);
     size = 0;
   }
-  void Sort(__compar_fn_t Compare)
+  void Sort(int (*Compare)(const void *, const void *))
   {
     qsort(data, size, sizeof(T), Compare);
   }
--- a/vdr.c
+++ b/vdr.c
@@ -662,9 +662,12 @@ int main(int argc, char *argv[])
      }
   else if (Terminal) {
      // Claim new controlling terminal
-     stdin  = freopen(Terminal, "r", stdin);
-     stdout = freopen(Terminal, "w", stdout);
-     stderr = freopen(Terminal, "w", stderr);
+     if (!freopen(Terminal, "r", stdin)
+           || !freopen(Terminal, "w", stdout)
+           || !freopen(Terminal, "w", stderr)) {
+        fprintf(stderr, "vdr: can't open terminal %s\n", Terminal);
+        return 2;
+        }
      HasStdin = true;
      tcgetattr(STDIN_FILENO, &savedTm);
      }
@@ -1580,12 +1583,14 @@ int main(int argc, char *argv[])
               cSchedules::Cleanup();
               // Plugins housekeeping:
               PluginManager.Housekeeping();
+#ifdef __GLIBC__
               // Memory cleanup:
               static time_t LastMemoryCleanup = 0;
               if ((Now - LastMemoryCleanup) > MEMCLEANUPDELTA) {
                  malloc_trim(0);
                  LastMemoryCleanup = Now;
                  }
+#endif
               }
            }
 
