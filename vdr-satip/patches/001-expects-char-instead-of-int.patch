--- a/common.h
+++ b/common.h
@@ -54,7 +54,7 @@
   do {                                                         \
      if (exp) {                                                \
         char tmp[64];                                          \
-        esyslog("[%s,%d]: " errstr ": %s", __FILE__, __LINE__, \
+        esyslog("[%s,%d]: " errstr ": %d", __FILE__, __LINE__, \
                 strerror_r(errno, tmp, sizeof(tmp)));          \
         func;                                                  \
         ret;                                                   \
--- a/sectionfilter.c
+++ b/sectionfilter.c
@@ -52,11 +52,11 @@ cSatipSectionFilter::cSatipSectionFilter(int deviceIndexP, uint16_t pidP, uint8_
   socketM[0] = socketM[1] = -1;
   if (socketpair(AF_UNIX, SOCK_SEQPACKET, 0, socketM) != 0) {
      char tmp[64];
-     error("Opening section filter sockets failed (device=%d pid=%d): %s", deviceIndexM, pidM, strerror_r(errno, tmp, sizeof(tmp)));
+     error("Opening section filter sockets failed (device=%d pid=%d): %d", deviceIndexM, pidM, strerror_r(errno, tmp, sizeof(tmp)));
      }
   else if ((fcntl(socketM[0], F_SETFL, O_NONBLOCK) != 0) || (fcntl(socketM[1], F_SETFL, O_NONBLOCK) != 0)) {
      char tmp[64];
-     error("Setting section filter socket to non-blocking mode failed (device=%d pid=%d): %s", deviceIndexM, pidM, strerror_r(errno, tmp, sizeof(tmp)));
+     error("Setting section filter socket to non-blocking mode failed (device=%d pid=%d): %d", deviceIndexM, pidM, strerror_r(errno, tmp, sizeof(tmp)));
      }
 }
 
--- a/socket.c
+++ b/socket.c
@@ -173,7 +173,7 @@ bool cSatipSocket::CheckAddress(const char *addrP, in_addr_t *inAddrP)
         struct hostent *host = gethostbyname(addrP);
         if (!host) {
            char tmp[64];
-           error("gethostbyname() failed: %s is not valid address: %s", addrP,
+           error("gethostbyname() failed: %s is not valid address: %d", addrP,
                  strerror_r(h_errno, tmp, sizeof(tmp)));
            return false;
            }
